PUSH    <
POP     <
SP      <
TRUE    <
FALSE   <
AND   <
OR    <
NOT   <
OP1   <
OP2   <
GET_VECT    <
SET_VECT     <
GET_OFFSET  <
SET_OFFSET  <
PUSHDOWN_SUM    <
PUSHDOWN_DIF    <
PUSHDOWN_MUL    <
PUSHDOWN_DIV    <
BASE    <
K_0000  <
WORD_TAM <
&     /0000
LD    SP
+     WORD_TAM
MM    FP
SC    main
FIM   HM FIM
FP    $ =1
; declaracao de CONSTANTES
K_FFFA	K /FFFA
K_FFFC	K /FFFC
K_0002	K /0002
K_FFF8	K /FFF8
K_1234	K /1234
K_0004	K /0004
K_0003	K /0003
K_0006	K /0006
K_0001	K /0001
K_0005	K /0005
; declaracao de FUNCOES
f	$ =1
LD FP
MM BASE
LD K_FFFA
SC PUSH
SC GET_VECT
SC PUSH
LD K_FFFC
SC PUSH
SC GET_VECT
SC PUSH
SC PUSHDOWN_SUM
LD K_0002
SC PUSH
SC PUSHDOWN_MUL
LD K_FFF8
SC PUSH
SC SET_VECT
LD FP
-  WORD_TAM
MM SP
RET_f	RS	f
main	$ =1
LD K_0000
SC PUSH  ; var a
LD K_0000
SC PUSH  ; var b
LD FP
MM BASE
LD K_1234
SC PUSH
LD K_0004
SC PUSH
SC SET_VECT
LD K_0003
SC PUSH
LD K_0006
SC PUSH
; espaco para valor de retorno
LD K_0000
SC PUSH
LD K_0003
SC PUSH
; espaco para valor de retorno
LD K_0000
SC PUSH
LD K_0001
SC PUSH
; par p1
LD K_0002
SC PUSH
; par p2
LD main
SC PUSH
LD FP
SC PUSH
; troca o contexto
LD SP
+ WORD_TAM
MM FP
SC f
SC POP
MM FP
SC POP
MM main
SC POP
SC POP
SC PUSHDOWN_SUM
; par p1
LD K_0005
SC PUSH
; par p2
LD main
SC PUSH
LD FP
SC PUSH
; troca o contexto
LD SP
+ WORD_TAM
MM FP
SC f
SC POP
MM FP
SC POP
MM main
SC POP
SC POP
SC PUSHDOWN_MUL
SC PUSHDOWN_SUM
LD FP
MM BASE
LD K_0002
SC PUSH
SC SET_VECT
LD FP
-  WORD_TAM
MM SP
RET_main	RS	main
# FIM
