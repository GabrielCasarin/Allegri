<S>
DefineFunc EXP
DefineFunc
<DefineFunc>
q8 q11 q5 q12 q7 q2 q10 q9 q13 q0 q4 q6 q3 q1 q14 q15 q16 q17 q18
q0
q9
par var } def = enter { , Identificador int
	(q0, 'def') -> q1
	(q1, 'Identificador') -> q2\declaracao_funcao
	(q2, '{') -> q4
	(q2, 'int') -> q3\definir_tipo_funcao
	(q3, 'enter') -> q5
	(q3, '{') -> q4\calcular_end_parametros
	(q4, 'var') -> q10\inicia_declaracao_variavel
	(q4, '}') -> q9\encerra_funcao
	(q4, 'enter') -> q4
	(q4, 'Identificador') -> q8\inicia_comando_simples
	(q5, 'par') -> q6\inicia_declaracao_parametros
	(q5, 'enter') -> q5
	(q5, '{') -> q4\calcular_end_parametros
	(q6, 'Identificador') -> q7\novo_par
	(q8, '=') -> q11
	(q8, '(')-> q16\iniciar_frame
	q11 => (EXP, q12)\iniciar_expressao_mat
	(q12, 'enter') -> q13\comando_atribuicao
	(q7, ',') -> q6
	(q7, 'int') -> q3\fecha_declaracao_parametro
	(q2, 'enter') -> q5
	(q10, 'Identificador') -> q14\nova_var
	(q14, ',') -> q10
	(q14, 'int') -> q15\fecha_declaracao_variavel
	(q15, 'enter') -> q4
	(q13, '}') -> q9\encerra_funcao
	(q13, 'enter') -> q13
	(q13, 'Identificador') -> q8\inicia_comando_simples
	(q16, ')') -> q17
	q16 => (EXP, q18)\iniciar_expressao_mat
	(q18, ',') -> q16\guarda_parametro
	(q18, ')') -> q17\guarda_parametro
	(q17, 'enter') -> q13\chamar_funcao
	(q9, 'enter') -> q9
	(q9, 'def') -> q1
	(q4, 'return') -> q19
	(q13, 'return') -> q19
	q19 => (EXP, q20)\iniciar_expressao_mat
	(q20, 'enter') -> q13\comando_retorno
</DefineFunc>
<EXP>
q0 q1 q2 q3 q4 q5 q6
q0
q1
- Numero ) Identificador ( + / * Comparacao
	(q0, 'Numero') -> q1\recebe_operando_num
	(q0, 'Identificador') -> q1\recebe_operando_id
	(q0, '-') -> q6\inverte_termo
	(q0, '(') -> q2\abre_parenteses
	(q6, 'Numero') -> q1\recebe_operando_num
	(q6, 'Identificador') -> q1\recebe_operando_id
	(q6, '(') -> q2\abre_parenteses
	(q1, '-') -> q0\mais_ou_menos
	(q1, '+') -> q0\mais_ou_menos
	(q1, '/') -> q0\vezes_ou_dividir
	(q1, '*') -> q0\vezes_ou_dividir
	q1 => pop()\finalizar_expressao_mat
	q2 => (EXP, q3)
	(q3, ')') -> q1\fecha_parenteses
	(q1, '(') -> q4\iniciar_frame
	q4 => (EXP, q5)\iniciar_expressao_mat
	(q4, ')' ) -> q1
	(q5, ',') -> q4\separa_argumentos
	(q5, ')') -> q1\guarda_parametro_e_chamar_funcao
</EXP>
</S>
